### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Author {
  books(after: AuthorsOnBooksWhereUniqueInput, before: AuthorsOnBooksWhereUniqueInput, first: Int, last: Int): [AuthorsOnBooks!]!
  id: Int!
  name: String!
}

type AuthorsOnBooks {
  author: Author!
  authorId: Int!
  book: Book!
  bookId: Int!
}

input AuthorsOnBooksWhereUniqueInput {
  bookId_authorId: BookIdAuthorIdCompoundUniqueInput
}

input AuthorWhereUniqueInput {
  id: Int
}

type Book {
  addedBy: User
  authors(after: AuthorsOnBooksWhereUniqueInput, before: AuthorsOnBooksWhereUniqueInput, first: Int, last: Int): [AuthorsOnBooks!]!
  categories(after: CategoriesOnBooksWhereUniqueInput, before: CategoriesOnBooksWhereUniqueInput, first: Int, last: Int): [CategoriesOnBooks!]!
  cover: String
  description: String
  id: Int!
  title: String!
  users(after: UsersOnBooksWhereUniqueInput, before: UsersOnBooksWhereUniqueInput, first: Int, last: Int): [UsersOnBooks!]!
}

input BookIdAuthorIdCompoundUniqueInput {
  authorId: Int!
  bookId: Int!
}

input BookIdCategoryIdCompoundUniqueInput {
  bookId: Int!
  categoryId: Int!
}

input BookIdUserIdCompoundUniqueInput {
  bookId: Int!
  userId: Int!
}

input BookWhereUniqueInput {
  id: Int
}

type CategoriesOnBooks {
  book: Book!
  bookId: Int!
  category: Category!
  categoryId: Int!
}

input CategoriesOnBooksWhereUniqueInput {
  bookId_categoryId: BookIdCategoryIdCompoundUniqueInput
}

type Category {
  books(after: CategoriesOnBooksWhereUniqueInput, before: CategoriesOnBooksWhereUniqueInput, first: Int, last: Int): [CategoriesOnBooks!]!
  id: Int!
  name: String!
}

input CategoryWhereUniqueInput {
  id: Int
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Query {
  author(where: AuthorWhereUniqueInput!): Author
  authors(after: AuthorWhereUniqueInput, before: AuthorWhereUniqueInput, first: Int, last: Int): [Author!]!
  authorsOnBooks(after: AuthorsOnBooksWhereUniqueInput, before: AuthorsOnBooksWhereUniqueInput, first: Int, last: Int): [AuthorsOnBooks!]!
  book(where: BookWhereUniqueInput!): Book
  books(after: BookWhereUniqueInput, before: BookWhereUniqueInput, first: Int, last: Int): [Book!]!
  categories(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int): [Category!]!
  categoriesOnBooks(after: CategoriesOnBooksWhereUniqueInput, before: CategoriesOnBooksWhereUniqueInput, first: Int, last: Int): [CategoriesOnBooks!]!
  category(where: CategoryWhereUniqueInput!): Category
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  usersOnBooks(after: UsersOnBooksWhereUniqueInput, before: UsersOnBooksWhereUniqueInput, first: Int, last: Int): [UsersOnBooks!]!
}

enum ReadingStatus {
  FINISHED
  IN_PROGRESS
  NOT_STARTED
}

type User {
  addedBooks(after: BookWhereUniqueInput, before: BookWhereUniqueInput, first: Int, last: Int): [Book!]!
  books(after: UsersOnBooksWhereUniqueInput, before: UsersOnBooksWhereUniqueInput, first: Int, last: Int): [UsersOnBooks!]!
  email: String!
  id: Int!
  name: String!
}

type UsersOnBooks {
  book: Book!
  bookId: Int!
  pageNumber: Int
  status: ReadingStatus!
  user: User!
  userId: Int!
}

input UsersOnBooksWhereUniqueInput {
  bookId_userId: BookIdUserIdCompoundUniqueInput
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
